/**
 * @license
 * Cesium - https://github.com/CesiumGS/cesium
 * Version 1.99.9
 *
 * Copyright 2011-2022 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/main/LICENSE.md for full licensing details.
 */define(["exports","./Transforms-5b74e989","./Matrix3-2955527a","./ComponentDatatype-f9ac3ed8","./defaultValue-ebbd2e4d","./GeometryAttribute-9c756444","./GeometryAttributes-ca309b71","./GeometryOffsetAttribute-739bec2c","./VertexFormat-5b02b45a"],function(C,z,i,x,u,c,F,w,p){"use strict";const _=new i.Cartesian3;function s(o){const r=(o=u.defaultValue(o,u.defaultValue.EMPTY_OBJECT)).minimum,a=o.maximum,m=u.defaultValue(o.vertexFormat,p.VertexFormat.DEFAULT);this._minimum=i.Cartesian3.clone(r),this._maximum=i.Cartesian3.clone(a),this._vertexFormat=m,this._offsetAttribute=o.offsetAttribute,this._workerName="createBoxGeometry"}s.fromDimensions=function(o){const r=(o=u.defaultValue(o,u.defaultValue.EMPTY_OBJECT)).dimensions,a=i.Cartesian3.multiplyByScalar(r,.5,new i.Cartesian3);return new s({minimum:i.Cartesian3.negate(a,new i.Cartesian3),maximum:a,vertexFormat:o.vertexFormat,offsetAttribute:o.offsetAttribute})},s.fromAxisAlignedBoundingBox=function(o){return new s({minimum:o.minimum,maximum:o.maximum})},s.packedLength=2*i.Cartesian3.packedLength+p.VertexFormat.packedLength+1,s.pack=function(o,r,a){return a=u.defaultValue(a,0),i.Cartesian3.pack(o._minimum,r,a),i.Cartesian3.pack(o._maximum,r,a+i.Cartesian3.packedLength),p.VertexFormat.pack(o._vertexFormat,r,a+2*i.Cartesian3.packedLength),r[a+2*i.Cartesian3.packedLength+p.VertexFormat.packedLength]=u.defaultValue(o._offsetAttribute,-1),r};const l=new i.Cartesian3,A=new i.Cartesian3,b=new p.VertexFormat,d={minimum:l,maximum:A,vertexFormat:b,offsetAttribute:void 0};let f;s.unpack=function(o,r,a){r=u.defaultValue(r,0);const m=i.Cartesian3.unpack(o,r,l),y=i.Cartesian3.unpack(o,r+i.Cartesian3.packedLength,A),n=p.VertexFormat.unpack(o,r+2*i.Cartesian3.packedLength,b),e=o[r+2*i.Cartesian3.packedLength+p.VertexFormat.packedLength];return u.defined(a)?(a._minimum=i.Cartesian3.clone(m,a._minimum),a._maximum=i.Cartesian3.clone(y,a._maximum),a._vertexFormat=p.VertexFormat.clone(n,a._vertexFormat),a._offsetAttribute=e===-1?void 0:e,a):(d.offsetAttribute=e===-1?void 0:e,new s(d))},s.createGeometry=function(o){const r=o._minimum,a=o._maximum,m=o._vertexFormat;if(i.Cartesian3.equals(r,a))return;const y=new F.GeometryAttributes;let n,e;if(m.position&&(m.st||m.normal||m.tangent||m.bitangent)){if(m.position&&(e=new Float64Array(72),e[0]=r.x,e[1]=r.y,e[2]=a.z,e[3]=a.x,e[4]=r.y,e[5]=a.z,e[6]=a.x,e[7]=a.y,e[8]=a.z,e[9]=r.x,e[10]=a.y,e[11]=a.z,e[12]=r.x,e[13]=r.y,e[14]=r.z,e[15]=a.x,e[16]=r.y,e[17]=r.z,e[18]=a.x,e[19]=a.y,e[20]=r.z,e[21]=r.x,e[22]=a.y,e[23]=r.z,e[24]=a.x,e[25]=r.y,e[26]=r.z,e[27]=a.x,e[28]=a.y,e[29]=r.z,e[30]=a.x,e[31]=a.y,e[32]=a.z,e[33]=a.x,e[34]=r.y,e[35]=a.z,e[36]=r.x,e[37]=r.y,e[38]=r.z,e[39]=r.x,e[40]=a.y,e[41]=r.z,e[42]=r.x,e[43]=a.y,e[44]=a.z,e[45]=r.x,e[46]=r.y,e[47]=a.z,e[48]=r.x,e[49]=a.y,e[50]=r.z,e[51]=a.x,e[52]=a.y,e[53]=r.z,e[54]=a.x,e[55]=a.y,e[56]=a.z,e[57]=r.x,e[58]=a.y,e[59]=a.z,e[60]=r.x,e[61]=r.y,e[62]=r.z,e[63]=a.x,e[64]=r.y,e[65]=r.z,e[66]=a.x,e[67]=r.y,e[68]=a.z,e[69]=r.x,e[70]=r.y,e[71]=a.z,y.position=new c.GeometryAttribute({componentDatatype:x.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e})),m.normal){const t=new Float32Array(72);t[0]=0,t[1]=0,t[2]=1,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=1,t[9]=0,t[10]=0,t[11]=1,t[12]=0,t[13]=0,t[14]=-1,t[15]=0,t[16]=0,t[17]=-1,t[18]=0,t[19]=0,t[20]=-1,t[21]=0,t[22]=0,t[23]=-1,t[24]=1,t[25]=0,t[26]=0,t[27]=1,t[28]=0,t[29]=0,t[30]=1,t[31]=0,t[32]=0,t[33]=1,t[34]=0,t[35]=0,t[36]=-1,t[37]=0,t[38]=0,t[39]=-1,t[40]=0,t[41]=0,t[42]=-1,t[43]=0,t[44]=0,t[45]=-1,t[46]=0,t[47]=0,t[48]=0,t[49]=1,t[50]=0,t[51]=0,t[52]=1,t[53]=0,t[54]=0,t[55]=1,t[56]=0,t[57]=0,t[58]=1,t[59]=0,t[60]=0,t[61]=-1,t[62]=0,t[63]=0,t[64]=-1,t[65]=0,t[66]=0,t[67]=-1,t[68]=0,t[69]=0,t[70]=-1,t[71]=0,y.normal=new c.GeometryAttribute({componentDatatype:x.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:t})}if(m.st){const t=new Float32Array(48);t[0]=0,t[1]=0,t[2]=1,t[3]=0,t[4]=1,t[5]=1,t[6]=0,t[7]=1,t[8]=1,t[9]=0,t[10]=0,t[11]=0,t[12]=0,t[13]=1,t[14]=1,t[15]=1,t[16]=0,t[17]=0,t[18]=1,t[19]=0,t[20]=1,t[21]=1,t[22]=0,t[23]=1,t[24]=1,t[25]=0,t[26]=0,t[27]=0,t[28]=0,t[29]=1,t[30]=1,t[31]=1,t[32]=1,t[33]=0,t[34]=0,t[35]=0,t[36]=0,t[37]=1,t[38]=1,t[39]=1,t[40]=0,t[41]=0,t[42]=1,t[43]=0,t[44]=1,t[45]=1,t[46]=0,t[47]=1,y.st=new c.GeometryAttribute({componentDatatype:x.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:t})}if(m.tangent){const t=new Float32Array(72);t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t[6]=1,t[7]=0,t[8]=0,t[9]=1,t[10]=0,t[11]=0,t[12]=-1,t[13]=0,t[14]=0,t[15]=-1,t[16]=0,t[17]=0,t[18]=-1,t[19]=0,t[20]=0,t[21]=-1,t[22]=0,t[23]=0,t[24]=0,t[25]=1,t[26]=0,t[27]=0,t[28]=1,t[29]=0,t[30]=0,t[31]=1,t[32]=0,t[33]=0,t[34]=1,t[35]=0,t[36]=0,t[37]=-1,t[38]=0,t[39]=0,t[40]=-1,t[41]=0,t[42]=0,t[43]=-1,t[44]=0,t[45]=0,t[46]=-1,t[47]=0,t[48]=-1,t[49]=0,t[50]=0,t[51]=-1,t[52]=0,t[53]=0,t[54]=-1,t[55]=0,t[56]=0,t[57]=-1,t[58]=0,t[59]=0,t[60]=1,t[61]=0,t[62]=0,t[63]=1,t[64]=0,t[65]=0,t[66]=1,t[67]=0,t[68]=0,t[69]=1,t[70]=0,t[71]=0,y.tangent=new c.GeometryAttribute({componentDatatype:x.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:t})}if(m.bitangent){const t=new Float32Array(72);t[0]=0,t[1]=1,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=1,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=1,t[14]=0,t[15]=0,t[16]=1,t[17]=0,t[18]=0,t[19]=1,t[20]=0,t[21]=0,t[22]=1,t[23]=0,t[24]=0,t[25]=0,t[26]=1,t[27]=0,t[28]=0,t[29]=1,t[30]=0,t[31]=0,t[32]=1,t[33]=0,t[34]=0,t[35]=1,t[36]=0,t[37]=0,t[38]=1,t[39]=0,t[40]=0,t[41]=1,t[42]=0,t[43]=0,t[44]=1,t[45]=0,t[46]=0,t[47]=1,t[48]=0,t[49]=0,t[50]=1,t[51]=0,t[52]=0,t[53]=1,t[54]=0,t[55]=0,t[56]=1,t[57]=0,t[58]=0,t[59]=1,t[60]=0,t[61]=0,t[62]=1,t[63]=0,t[64]=0,t[65]=1,t[66]=0,t[67]=0,t[68]=1,t[69]=0,t[70]=0,t[71]=1,y.bitangent=new c.GeometryAttribute({componentDatatype:x.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:t})}n=new Uint16Array(36),n[0]=0,n[1]=1,n[2]=2,n[3]=0,n[4]=2,n[5]=3,n[6]=6,n[7]=5,n[8]=4,n[9]=7,n[10]=6,n[11]=4,n[12]=8,n[13]=9,n[14]=10,n[15]=8,n[16]=10,n[17]=11,n[18]=14,n[19]=13,n[20]=12,n[21]=15,n[22]=14,n[23]=12,n[24]=18,n[25]=17,n[26]=16,n[27]=19,n[28]=18,n[29]=16,n[30]=20,n[31]=21,n[32]=22,n[33]=20,n[34]=22,n[35]=23}else e=new Float64Array(24),e[0]=r.x,e[1]=r.y,e[2]=r.z,e[3]=a.x,e[4]=r.y,e[5]=r.z,e[6]=a.x,e[7]=a.y,e[8]=r.z,e[9]=r.x,e[10]=a.y,e[11]=r.z,e[12]=r.x,e[13]=r.y,e[14]=a.z,e[15]=a.x,e[16]=r.y,e[17]=a.z,e[18]=a.x,e[19]=a.y,e[20]=a.z,e[21]=r.x,e[22]=a.y,e[23]=a.z,y.position=new c.GeometryAttribute({componentDatatype:x.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e}),n=new Uint16Array(36),n[0]=4,n[1]=5,n[2]=6,n[3]=4,n[4]=6,n[5]=7,n[6]=1,n[7]=0,n[8]=3,n[9]=1,n[10]=3,n[11]=2,n[12]=1,n[13]=6,n[14]=5,n[15]=1,n[16]=2,n[17]=6,n[18]=2,n[19]=3,n[20]=7,n[21]=2,n[22]=7,n[23]=6,n[24]=3,n[25]=0,n[26]=4,n[27]=3,n[28]=4,n[29]=7,n[30]=0,n[31]=1,n[32]=5,n[33]=0,n[34]=5,n[35]=4;const g=i.Cartesian3.subtract(a,r,_),v=.5*i.Cartesian3.magnitude(g);if(u.defined(o._offsetAttribute)){const t=e.length,D=o._offsetAttribute===w.GeometryOffsetAttribute.NONE?0:1,k=new Uint8Array(t/3).fill(D);y.applyOffset=new c.GeometryAttribute({componentDatatype:x.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:k})}return new c.Geometry({attributes:y,indices:n,primitiveType:c.PrimitiveType.TRIANGLES,boundingSphere:new z.BoundingSphere(i.Cartesian3.ZERO,v),offsetAttribute:o._offsetAttribute})},s.getUnitBox=function(){return u.defined(f)||(f=s.createGeometry(s.fromDimensions({dimensions:new i.Cartesian3(1,1,1),vertexFormat:p.VertexFormat.POSITION_ONLY}))),f},C.BoxGeometry=s});
