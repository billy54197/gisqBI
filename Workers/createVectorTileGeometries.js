/**
 * @license
 * Cesium - https://github.com/CesiumGS/cesium
 * Version 1.99.9
 *
 * Copyright 2011-2022 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/main/LICENSE.md for full licensing details.
 */define(["./Transforms-5b74e989","./BoxGeometry-8e15890e","./Matrix3-2955527a","./Color-3cef7e8d","./CylinderGeometry-8b5b563c","./defaultValue-ebbd2e4d","./EllipsoidGeometry-51e0eb1c","./IndexDatatype-7ccfd280","./Matrix2-462b83d3","./createTaskProcessorWorker","./Math-1fe079f3","./combine-55e9f355","./RuntimeError-38a08050","./ComponentDatatype-f9ac3ed8","./WebGLConstants-544672c2","./GeometryAttribute-9c756444","./GeometryAttributes-ca309b71","./GeometryOffsetAttribute-739bec2c","./VertexFormat-5b02b45a","./CylinderGeometryLibrary-187f9348"],function(E,H,n,V,J,l,K,Q,s,X,fe,ue,he,be,pe,ye,xe,ge,me,Ce){"use strict";function $(e){this.offset=e.offset,this.count=e.count,this.color=e.color,this.batchIds=e.batchIds}const T=new n.Cartesian3,ee=s.Matrix4.packedLength+n.Cartesian3.packedLength,te=s.Matrix4.packedLength+2,ne=s.Matrix4.packedLength+n.Cartesian3.packedLength,re=n.Cartesian3.packedLength+1,f={modelMatrix:new s.Matrix4,boundingVolume:new E.BoundingSphere};function ie(e,a){let r=a*ee;const o=n.Cartesian3.unpack(e,r,T);r+=n.Cartesian3.packedLength;const d=s.Matrix4.unpack(e,r,f.modelMatrix);s.Matrix4.multiplyByScale(d,o,d);const t=f.boundingVolume;return n.Cartesian3.clone(n.Cartesian3.ZERO,t.center),t.radius=Math.sqrt(3),f}function ae(e,a){let r=a*te;const o=e[r++],d=e[r++],t=n.Cartesian3.fromElements(o,o,d,T),i=s.Matrix4.unpack(e,r,f.modelMatrix);s.Matrix4.multiplyByScale(i,t,i);const b=f.boundingVolume;return n.Cartesian3.clone(n.Cartesian3.ZERO,b.center),b.radius=Math.sqrt(2),f}function oe(e,a){let r=a*ne;const o=n.Cartesian3.unpack(e,r,T);r+=n.Cartesian3.packedLength;const d=s.Matrix4.unpack(e,r,f.modelMatrix);s.Matrix4.multiplyByScale(d,o,d);const t=f.boundingVolume;return n.Cartesian3.clone(n.Cartesian3.ZERO,t.center),t.radius=1,f}function se(e,a){let r=a*re;const o=e[r++],d=n.Cartesian3.unpack(e,r,T),t=s.Matrix4.fromTranslation(d,f.modelMatrix);s.Matrix4.multiplyByUniformScale(t,o,t);const i=f.boundingVolume;return n.Cartesian3.clone(n.Cartesian3.ZERO,i.center),i.radius=1,f}const de=new n.Cartesian3;function F(e,a,r,o,d){if(!l.defined(a))return;const t=r.length,i=o.attributes.position.values,b=o.indices,c=e.positions,p=e.vertexBatchIds,y=e.indices,u=e.batchIds,g=e.batchTableColors,U=e.batchedIndices,G=e.indexOffsets,S=e.indexCounts,O=e.boundingVolumes,Z=e.modelMatrix,D=e.center;let L=e.positionOffset,I=e.batchIdIndex,B=e.indexOffset;const P=e.batchedIndicesOffset;for(let w=0;w<t;++w){const v=d(a,w),M=v.modelMatrix;s.Matrix4.multiply(Z,M,M);const k=r[w],A=i.length;for(let h=0;h<A;h+=3){const C=n.Cartesian3.unpack(i,h,de);s.Matrix4.multiplyByPoint(M,C,C),n.Cartesian3.subtract(C,D,C),n.Cartesian3.pack(C,c,3*L+h),p[I++]=k}const x=b.length;for(let h=0;h<x;++h)y[B+h]=b[h]+L;const m=w+P;U[m]=new $({offset:B,count:x,color:V.Color.fromRgba(g[k]),batchIds:[k]}),u[m]=k,G[m]=B,S[m]=x,O[m]=E.BoundingSphere.transform(v.boundingVolume,M),L+=A/3,B+=x}e.positionOffset=L,e.batchIdIndex=I,e.indexOffset=B,e.batchedIndicesOffset+=t}const _=new n.Cartesian3,N=new s.Matrix4;function ce(e,a,r){const o=r.length,d=2+o*E.BoundingSphere.packedLength+1+function(c){const p=c.length;let y=0;for(let u=0;u<p;++u)y+=V.Color.packedLength+3+c[u].batchIds.length;return y}(a),t=new Float64Array(d);let i=0;t[i++]=e,t[i++]=o;for(let c=0;c<o;++c)E.BoundingSphere.pack(r[c],t,i),i+=E.BoundingSphere.packedLength;const b=a.length;t[i++]=b;for(let c=0;c<b;++c){const p=a[c];V.Color.pack(p.color,t,i),i+=V.Color.packedLength,t[i++]=p.offset,t[i++]=p.count;const y=p.batchIds,u=y.length;t[i++]=u;for(let g=0;g<u;++g)t[i++]=y[g]}return t}return X(function(e,a){const r=l.defined(e.boxes)?new Float32Array(e.boxes):void 0,o=l.defined(e.boxBatchIds)?new Uint16Array(e.boxBatchIds):void 0,d=l.defined(e.cylinders)?new Float32Array(e.cylinders):void 0,t=l.defined(e.cylinderBatchIds)?new Uint16Array(e.cylinderBatchIds):void 0,i=l.defined(e.ellipsoids)?new Float32Array(e.ellipsoids):void 0,b=l.defined(e.ellipsoidBatchIds)?new Uint16Array(e.ellipsoidBatchIds):void 0,c=l.defined(e.spheres)?new Float32Array(e.spheres):void 0,p=l.defined(e.sphereBatchIds)?new Uint16Array(e.sphereBatchIds):void 0,y=l.defined(r)?o.length:0,u=l.defined(d)?t.length:0,g=l.defined(i)?b.length:0,U=l.defined(c)?p.length:0,G=H.BoxGeometry.getUnitBox(),S=J.CylinderGeometry.getUnitCylinder(),O=K.EllipsoidGeometry.getUnitEllipsoid(),Z=G.attributes.position.values,D=S.attributes.position.values,L=O.attributes.position.values;let I=Z.length*y;I+=D.length*u,I+=L.length*(g+U);const B=G.indices,P=S.indices,w=O.indices;let v=B.length*y;v+=P.length*u,v+=w.length*(g+U);const M=new Float32Array(I),k=new Uint16Array(I/3),A=Q.IndexDatatype.createTypedArray(I/3,v),x=y+u+g+U,m=new Uint16Array(x),h=new Array(x),C=new Uint32Array(x),q=new Uint32Array(x),Y=new Array(x);(function(le){const z=new Float64Array(le);let W=0;n.Cartesian3.unpack(z,W,_),W+=n.Cartesian3.packedLength,s.Matrix4.unpack(z,W,N)})(e.packedBuffer);const R={batchTableColors:new Uint32Array(e.batchTableColors),positions:M,vertexBatchIds:k,indices:A,batchIds:m,batchedIndices:h,indexOffsets:C,indexCounts:q,boundingVolumes:Y,positionOffset:0,batchIdIndex:0,indexOffset:0,batchedIndicesOffset:0,modelMatrix:N,center:_};F(R,r,o,G,ie),F(R,d,t,S,ae),F(R,i,b,O,oe),F(R,c,p,O,se);const j=ce(A.BYTES_PER_ELEMENT,h,Y);return a.push(M.buffer,k.buffer,A.buffer),a.push(m.buffer,C.buffer,q.buffer),a.push(j.buffer),{positions:M.buffer,vertexBatchIds:k.buffer,indices:A.buffer,indexOffsets:C.buffer,indexCounts:q.buffer,batchIds:m.buffer,packedBuffer:j.buffer}})});
