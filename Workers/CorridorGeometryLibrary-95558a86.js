/**
 * @license
 * Cesium - https://github.com/CesiumGS/cesium
 * Version 1.99.9
 *
 * Copyright 2011-2022 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/main/LICENSE.md for full licensing details.
 */define(["exports","./Matrix3-2955527a","./PolylineVolumeGeometryLibrary-65969b57","./defaultValue-ebbd2e4d","./Math-1fe079f3","./PolylinePipeline-0a87fb90","./Transforms-5b74e989"],function(_,a,A,I,O,R,Q){"use strict";const U={},E=new a.Cartesian3,q=new a.Cartesian3,$=new a.Cartesian3,j=new a.Cartesian3,g=[new a.Cartesian3,new a.Cartesian3],k=new a.Cartesian3,F=new a.Cartesian3,H=new a.Cartesian3,aa=new a.Cartesian3,na=new a.Cartesian3,ra=new a.Cartesian3,ta=new a.Cartesian3,ia=new a.Cartesian3,sa=new a.Cartesian3,ea=new a.Cartesian3,J=new Q.Quaternion,K=new a.Matrix3;function L(e,o,l,C,t){const y=a.Cartesian3.angleBetween(a.Cartesian3.subtract(o,e,E),a.Cartesian3.subtract(l,e,q)),u=C===A.CornerType.BEVELED?1:Math.ceil(y/O.CesiumMath.toRadians(5))+1,r=3*u,i=new Array(r);let d;i[r-3]=l.x,i[r-2]=l.y,i[r-1]=l.z,d=t?a.Matrix3.fromQuaternion(Q.Quaternion.fromAxisAngle(a.Cartesian3.negate(e,E),y/u,J),K):a.Matrix3.fromQuaternion(Q.Quaternion.fromAxisAngle(e,y/u,J),K);let n=0;o=a.Cartesian3.clone(o,E);for(let s=0;s<u;s++)o=a.Matrix3.multiplyByVector(d,o,o),i[n++]=o.x,i[n++]=o.y,i[n++]=o.z;return i}function W(e,o,l,C){let t=E;return C||(o=a.Cartesian3.negate(o,o)),t=a.Cartesian3.add(e,o,t),[t.x,t.y,t.z,l.x,l.y,l.z]}function v(e,o,l,C){const t=new Array(e.length),y=new Array(e.length),u=a.Cartesian3.multiplyByScalar(o,l,E),r=a.Cartesian3.negate(u,q);let i=0,d=e.length-1;for(let n=0;n<e.length;n+=3){const s=a.Cartesian3.fromArray(e,n,$),z=a.Cartesian3.add(s,r,j);t[i++]=z.x,t[i++]=z.y,t[i++]=z.z;const p=a.Cartesian3.add(s,u,j);y[d--]=p.z,y[d--]=p.y,y[d--]=p.x}return C.push(t,y),C}U.addAttribute=function(e,o,l,C){const t=o.x,y=o.y,u=o.z;I.defined(l)&&(e[l]=t,e[l+1]=y,e[l+2]=u),I.defined(C)&&(e[C]=u,e[C-1]=y,e[C-2]=t)};const oa=new a.Cartesian3,la=new a.Cartesian3;U.computePositions=function(e){const o=e.granularity,l=e.positions,C=e.ellipsoid,t=e.width/2,y=e.cornerType,u=e.saveAttributes;let r=k,i=F,d=H,n=aa,s=na,z=ra,p=ta,c=ia,m=sa,P=ea,B=[];const D=u?[]:void 0,M=u?[]:void 0;let S,f=l[0],T=l[1];i=a.Cartesian3.normalize(a.Cartesian3.subtract(T,f,i),i),r=C.geodeticSurfaceNormal(f,r),n=a.Cartesian3.normalize(a.Cartesian3.cross(r,i,n),n),u&&(D.push(n.x,n.y,n.z),M.push(r.x,r.y,r.z)),p=a.Cartesian3.clone(f,p),f=T,d=a.Cartesian3.negate(i,d);const N=[];let V;const ya=l.length;for(V=1;V<ya-1;V++){r=C.geodeticSurfaceNormal(f,r),T=l[V+1],i=a.Cartesian3.normalize(a.Cartesian3.subtract(T,f,i),i),s=a.Cartesian3.normalize(a.Cartesian3.add(i,d,s),s);const w=a.Cartesian3.multiplyByScalar(r,a.Cartesian3.dot(i,r),oa);a.Cartesian3.subtract(i,w,w),a.Cartesian3.normalize(w,w);const x=a.Cartesian3.multiplyByScalar(r,a.Cartesian3.dot(d,r),la);if(a.Cartesian3.subtract(d,x,x),a.Cartesian3.normalize(x,x),!O.CesiumMath.equalsEpsilon(Math.abs(a.Cartesian3.dot(w,x)),1,O.CesiumMath.EPSILON7)){s=a.Cartesian3.cross(s,r,s),s=a.Cartesian3.cross(r,s,s),s=a.Cartesian3.normalize(s,s);const b=t/Math.max(.25,a.Cartesian3.magnitude(a.Cartesian3.cross(s,d,E))),h=A.PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(i,d,f,C);s=a.Cartesian3.multiplyByScalar(s,b,s),h?(c=a.Cartesian3.add(f,s,c),P=a.Cartesian3.add(c,a.Cartesian3.multiplyByScalar(n,t,P),P),m=a.Cartesian3.add(c,a.Cartesian3.multiplyByScalar(n,2*t,m),m),g[0]=a.Cartesian3.clone(p,g[0]),g[1]=a.Cartesian3.clone(P,g[1]),S=R.PolylinePipeline.generateArc({positions:g,granularity:o,ellipsoid:C}),B=v(S,n,t,B),u&&(D.push(n.x,n.y,n.z),M.push(r.x,r.y,r.z)),z=a.Cartesian3.clone(m,z),n=a.Cartesian3.normalize(a.Cartesian3.cross(r,i,n),n),m=a.Cartesian3.add(c,a.Cartesian3.multiplyByScalar(n,2*t,m),m),p=a.Cartesian3.add(c,a.Cartesian3.multiplyByScalar(n,t,p),p),y===A.CornerType.ROUNDED||y===A.CornerType.BEVELED?N.push({leftPositions:L(c,z,m,y,h)}):N.push({leftPositions:W(f,a.Cartesian3.negate(s,s),m,h)})):(m=a.Cartesian3.add(f,s,m),P=a.Cartesian3.add(m,a.Cartesian3.negate(a.Cartesian3.multiplyByScalar(n,t,P),P),P),c=a.Cartesian3.add(m,a.Cartesian3.negate(a.Cartesian3.multiplyByScalar(n,2*t,c),c),c),g[0]=a.Cartesian3.clone(p,g[0]),g[1]=a.Cartesian3.clone(P,g[1]),S=R.PolylinePipeline.generateArc({positions:g,granularity:o,ellipsoid:C}),B=v(S,n,t,B),u&&(D.push(n.x,n.y,n.z),M.push(r.x,r.y,r.z)),z=a.Cartesian3.clone(c,z),n=a.Cartesian3.normalize(a.Cartesian3.cross(r,i,n),n),c=a.Cartesian3.add(m,a.Cartesian3.negate(a.Cartesian3.multiplyByScalar(n,2*t,c),c),c),p=a.Cartesian3.add(m,a.Cartesian3.negate(a.Cartesian3.multiplyByScalar(n,t,p),p),p),y===A.CornerType.ROUNDED||y===A.CornerType.BEVELED?N.push({rightPositions:L(m,z,c,y,h)}):N.push({rightPositions:W(f,s,c,h)})),d=a.Cartesian3.negate(i,d)}f=T}let X;return r=C.geodeticSurfaceNormal(f,r),g[0]=a.Cartesian3.clone(p,g[0]),g[1]=a.Cartesian3.clone(f,g[1]),S=R.PolylinePipeline.generateArc({positions:g,granularity:o,ellipsoid:C}),B=v(S,n,t,B),u&&(D.push(n.x,n.y,n.z),M.push(r.x,r.y,r.z)),y===A.CornerType.ROUNDED&&(X=function(w){let x=k,b=F,h=H,G=w[1];b=a.Cartesian3.fromArray(w[1],G.length-3,b),h=a.Cartesian3.fromArray(w[0],0,h),x=a.Cartesian3.midpoint(b,h,x);const ca=L(x,b,h,A.CornerType.ROUNDED,!1),Y=w.length-1,Z=w[Y-1];return G=w[Y],b=a.Cartesian3.fromArray(Z,Z.length-3,b),h=a.Cartesian3.fromArray(G,0,h),x=a.Cartesian3.midpoint(b,h,x),[ca,L(x,b,h,A.CornerType.ROUNDED,!1)]}(B)),{positions:B,corners:N,lefts:D,normals:M,endPositions:X}};var Ca=U;_.CorridorGeometryLibrary=Ca});
