"use strict";(self.webpackChunkdatavisual=self.webpackChunkdatavisual||[]).push([[4214],{96411:function(P,u,l){l.d(u,{Z:function(){return E}});function f(e,n){let o=e.length-n,t=0;do{for(let s=n;s>0;s--)e[t+n]+=e[t],t++;o-=n}while(o>0)}function h(e,n,o){let t=0,s=e.length;const i=s/o;for(;s>n;){for(let a=n;a>0;--a)e[t+n]+=e[t],++t;s-=n}const d=e.slice();for(let a=0;a<i;++a)for(let r=0;r<o;++r)e[o*a+r]=d[(o-r-1)*i+a]}function g(e,n,o,t,s,i){if(!n||n===1)return e;for(let r=0;r<s.length;++r){if(s[r]%8!==0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(s[r]!==s[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const d=s[0]/8,a=i===2?1:s.length;for(let r=0;r<t&&!(r*a*o*d>=e.byteLength);++r){let c;if(n===2){switch(s[0]){case 8:c=new Uint8Array(e,r*a*o*d,a*o*d);break;case 16:c=new Uint16Array(e,r*a*o*d,a*o*d/2);break;case 32:c=new Uint32Array(e,r*a*o*d,a*o*d/4);break;default:throw new Error(`Predictor 2 not allowed with ${s[0]} bits per sample.`)}f(c,a,d)}else n===3&&(c=new Uint8Array(e,r*a*o*d,a*o*d),h(c,a,d))}return e}class E{async decode(n,o){const t=await this.decodeBlock(o),s=n.Predictor||1;if(s!==1){const i=!n.StripOffsets,d=i?n.TileWidth:n.ImageWidth,a=i?n.TileLength:n.RowsPerStrip||n.ImageLength;return g(t,s,d,a,n.BitsPerSample,n.PlanarConfiguration)}return t}}},74214:function(P,u,l){l.r(u),l.d(u,{default:function(){return n}});var f=l(50189),h=l(89536),g=l.n(h),E=l(96411),e=l(30798);class n extends E.Z{constructor(t){super(),this.planarConfiguration=typeof t.PlanarConfiguration<"u"?t.PlanarConfiguration:1,this.samplesPerPixel=typeof t.SamplesPerPixel<"u"?t.SamplesPerPixel:1,this.addCompression=t.LercParameters[e.L5.AddCompression]}decodeBlock(t){switch(this.addCompression){case e.Qb.None:break;case e.Qb.Deflate:t=(0,f.rr)(new Uint8Array(t)).buffer;break;default:throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`)}return g().decode(t,{returnPixelInterleavedDims:this.planarConfiguration===1}).pixels[0].buffer}}}}]);
