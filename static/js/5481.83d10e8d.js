"use strict";(self.webpackChunkdatavisual=self.webpackChunkdatavisual||[]).push([[5481],{93963:function(_,h,l){l.d(h,{Z:function(){return u}});function f(a,n){let e=a.length-n,d=0;do{for(let o=n;o>0;o--)a[d+n]+=a[d],d++;e-=n}while(e>0)}function g(a,n,e){let d=0,o=a.length;const i=o/e;for(;o>n;){for(let t=n;t>0;--t)a[d+n]+=a[d],++d;o-=n}const r=a.slice();for(let t=0;t<i;++t)for(let s=0;s<e;++s)a[e*t+s]=r[(e-s-1)*i+t]}function p(a,n,e,d,o,i){if(!n||n===1)return a;for(let s=0;s<o.length;++s){if(o[s]%8!==0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(o[s]!==o[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const r=o[0]/8,t=i===2?1:o.length;for(let s=0;s<d&&!(s*t*e*r>=a.byteLength);++s){let c;if(n===2){switch(o[0]){case 8:c=new Uint8Array(a,s*t*e*r,t*e*r);break;case 16:c=new Uint16Array(a,s*t*e*r,t*e*r/2);break;case 32:c=new Uint32Array(a,s*t*e*r,t*e*r/4);break;default:throw new Error(`Predictor 2 not allowed with ${o[0]} bits per sample.`)}f(c,t,r)}else n===3&&(c=new Uint8Array(a,s*t*e*r,t*e*r),g(c,t,r))}return a}class u{async decode(n,e){const d=await this.decodeBlock(e),o=n.Predictor||1;if(o!==1){const i=!n.StripOffsets,r=i?n.TileWidth:n.ImageWidth,t=i?n.TileLength:n.RowsPerStrip||n.ImageLength;return p(d,o,r,t,n.BitsPerSample,n.PlanarConfiguration)}return d}}},15481:function(_,h,l){l.r(h),l.d(h,{default:function(){return a}});var f=l(50189),g=l(89536),p=l(93963),u=l(46642);class a extends p.Z{constructor(e){super(),this.planarConfiguration=typeof e.PlanarConfiguration<"u"?e.PlanarConfiguration:1,this.samplesPerPixel=typeof e.SamplesPerPixel<"u"?e.SamplesPerPixel:1,this.addCompression=e.LercParameters[u.L5.AddCompression]}decodeBlock(e){switch(this.addCompression){case u.Qb.None:break;case u.Qb.Deflate:e=(0,f.rr)(new Uint8Array(e)).buffer;break;default:throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`)}return g.decode(e,{returnPixelInterleavedDims:this.planarConfiguration===1}).pixels[0].buffer}}}}]);
